#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<string.h>
#define  OK  1
#define  TRUE  1
#define  FALSE  0
#define  ERROR  0
#define  INFEASIBLE  -1
#define  OVERFLOW  -2
typedef struct
{
    float coef;
    int expn;
}term,ElemType;
typedef  int  Status;
typedef  struct  LNode
{
    ElemType data;
    struct LNode *next;
}*Link,*Position;
typedef  struct
{
    Link head,tail;
    int len;
}LinkList;
typedef LinkList Ploynomial;
Status MakeNode(Link *p,ElemType e);
void FreeNode(Link *p);
Status InitList(LinkList *L);
Status DestroyList(LinkList *L);
Status ClearList(LinkList *L);
Status InsFirst(LinkList *L,Link h,Link s);//add another variable.
Status DelFirst(LinkList *L,Link h,Link *q);//add another variable.
Status Append(LinkList *L,Link s);
Status Remove(LinkList *L,Link *q);
Status InsBefore(LinkList *L,Link *p,Link s);
Status InsAfter(LinkList *L,Link *p,Link s);
Status SetCurElem(Link p,ElemType e);
Status ListEmpty(LinkList L);
ElemType GetCurElem(Link p);
int ListLength(LinkList L);
Position GetHead(LinkList L);
Position GetLast(LinkList L);
Position PriorPos(LinkList L,Link p);
Position NextPos(LinkList L,Link p);
Status LocatePos(LinkList L,int i,Link *p);
Position LocateElem(LinkList L,ElemType e,Status(*compare)(ElemType,ElemType));
Status listTraverse(LinkList L,Status(*visit)(ElemType));
Status compare(ElemType a,ElemType b);
Status visit(ElemType c);
Status OrderInsert(LinkList *L,ElemType e,Status(*cmp)(ElemType,ElemType));
Status cmp(ElemType a,ElemType b);
Status CreatPloyn(Ploynomial *P,int m);
Status DestroyPloyn(Ploynomial *P);
Status PrintPloyn(Ploynomial P);
int PloynLength(Ploynomial P);
Status AddPloyn(Ploynomial *Pa,Ploynomial *Pb);
Status SubtractPloyn(Ploynomial *Pa,Ploynomial *Pb);
Status MultiplyPloyn(Ploynomial *Pa,Ploynomial *Pb);
Status LocateElem1(LinkList L,ElemType e,Position *q,int (*compare)(ElemType,ElemType));
Status AddPloyn1(Ploynomial *Pa,Ploynomial *Pb);
int main()
{
    Ploynomial Pa,Pb;
   // InitList(&P);
    CreatPloyn(&Pa,2);
    PrintPloyn(Pa);
    printf("\n");
    CreatPloyn(&Pb,3);
    PrintPloyn(Pb);
    SubtractPloyn(&Pa,&Pb);
    PrintPloyn(Pa);
    return 0;
}
Status MakeNode(Link *p,ElemType e)
{
    *p=(Link)malloc(sizeof(struct LNode));
    if(!p)
        exit(ERROR);
    (*p)->data=e;
    return OK;
}
void FreeNode(Link *p)
{
    free(*p);
    *p=NULL;
}
Status InitList(LinkList *L)
{
    Link p;
    p=(Link)malloc(sizeof(struct LNode));
    if(p)
    {
        p->next=NULL;
        L->head=p;
        L->tail=p;
        L->len=0;
        return OK;
    }
    else
        return ERROR;
}
Status ClearList(LinkList *L)
{
    Link p,q;
    if(L->head!=L->tail)
    {
        p=L->head->next;
        q=L->head->next;
        L->head->next=NULL;
        while(p!=L->tail)
        {
            p=q->next;
            free(q);
            q=p;
        }
        free(q);
        L->tail=L->head;
        L->len=0;
        return OK;
    }
    return ERROR;
}
Status DestroyList(LinkList *L)
{
    ClearList(L);
    FreeNode(&L->head);
    L->tail=NULL;
    L->len=0;
    return OK;
}
Status InsFirst(LinkList *L,Link h,Link s)
{
    s->next=h->next;
    h->next=s;
    if(h==L->tail)
        L->tail=h->next;
    L->len++;
    return OK;
}
Status DelFirst(LinkList *L,Link h,Link *q)
{
    *q=h->next;
    if(*q)
    {
        h->next=(*q)->next;
        if(!h->next)
            L->tail=h;
        L->len--;
        return OK;
    }
    else
        return FALSE;
}
Status Append(LinkList *L,Link s)
{
    int i=1;
    L->tail->next=s;
    while(s->next)
    {
        s=s->next;
        i++;
    }
    L->tail=s;
    L->len+=i;
    return OK;
}
Position PriorPos(LinkList L,Link p)
{
    Link q;
    q=L.head->next;
    if(q==p)
        return NULL;
    else
    {
        while(q->next!=p)
            q=q->next;
        return q;
    }
}
Status Remove(LinkList *L,Link *q)
{
    Link p=L->head;
    if(L->len==0)
    {
        q=NULL;
        return FALSE;
    }
    while(p->next!=L->tail)
        p=p->next;
    *q=L->tail;
    p->next=NULL;
    L->tail=p;
    L->len--;
    return OK;
}
Status InsBefore(LinkList *L,Link *p,Link s)
{
    Link q;
    q=PriorPos(*L,*p);
    if(!q)
        q=L->head;
    s->next=*p;
    q->next=s;
    *p=s;
    L->len++;
    return OK;
}
Status InsAfter(LinkList *L,Link *p,Link s)
{
    if(*p==L->tail)
        L->tail=s;
    s->next=(*p)->next;
    (*p)->next=s;
    *p=s;
    L->len++;
    return OK;
}
Status SetCurElem(Link p,ElemType e)
{
    p->data=e;
    return OK;
}
ElemType GetCurElem(Link p)
{
    return p->data;
}
Status ListEmpty(LinkList L)
{
    if(L.len)
        return FALSE;
    else
        return TRUE;
}
int ListLength(LinkList L)
{
    return L.len;

}
Position GetHead(LinkList L)
{
    return L.head;
}
Position GetLast(LinkList L)
{
    return L.tail;
}
Position NextPos(LinkList L,Link p)
{
    return p->next;
}
Status LocatePos(LinkList L,int i,Link *p)
{
    int j;
    if(i<0 || i>L.len)
        return ERROR;
    else
    {
        *p=L.head;
        for(j=1;j<=i;j++)
            *p=(*p)->next;
        return OK;
    }
}
Position LocateElem(LinkList L,ElemType e,Status(*compare)(ElemType,ElemType))
{
    Link p=L.head;
    do
        p=p->next;
    while(p&&!(compare(p->data,e)));
    return p;
}
Status listTraverse(LinkList L,Status(*visit)(ElemType))
{
    Link p=L.head->next;
    int j;
    for(j=1;j<=L.len;j++)
    {
        visit(p->data);
        p=p->next;
    }
    printf("\n");
    return OK;
}
Status visit(ElemType c)
{
    printf("%d ",c);
}
Status compare(ElemType a,ElemType b)
{
    if(a.expn==b.expn)
        return TRUE;
    else
        return FALSE;
}
Status cmp(ElemType a,ElemType b)
{
    if(a.expn==b.expn)
        return 0;
    else if(a.expn>b.expn)
        return 1;
    else
        return -1;
}
Status OrderInsert(LinkList *L,ElemType e,Status (*cmp)(ElemType,ElemType))
{
    Position q,s;
    if(LocateElem1(*L,e,&q,cmp))
    {
        q->data.coef+=e.coef;
        if(!q->data.coef)
        {
            s=PriorPos(*L,q);
            if(!s)
                s=L->head;
            DelFirst(L,s,&q);
            FreeNode(&q);
        }
    }
    else
    {
        MakeNode(&s,e);
        InsFirst(L,q,s);
    }
    return OK;
}
Status DestroyPloyn(Ploynomial *P)
{
    ClearList(P);
    FreeNode(&P->head);
    P->tail=NULL;
    P->len=0;
    return OK;
}
int PloynLength(Ploynomial P)
{
    return P.len;
}
Status CreatPloyn(Ploynomial *P,int m)
{
    Position q,s;
    term e;
    int i;
    InitList(P);
    for(i=1;i<=m;++i)
    {
        scanf("%f %d",&e.coef,&e.expn);
        if(!LocateElem1(*P,e,&q,compare))
        {
            MakeNode(&s,e);
            InsFirst(P,q,s);
        }
    }
    return OK;
}
Status PrintPloyn(Ploynomial P)
{
    Link q;
    q=P.head->next;
    while(q)
    {
        printf("%.2f %d\n",q->data.coef,q->data.expn);
        q=q->next;
    }
    return OK;
}
Status LocateElem1(LinkList L,ElemType e,Position *q,int (*compare)(ElemType,ElemType))
{
    Link p=L.head,pp;
    do
    {
        pp=p;
        p=p->next;
    }while(p&&(cmp(p->data,e))<0);
    if(!p || cmp(p->data,e)>0)
    {
        *q=pp;
        return FALSE;
    }
    else
    {
        *q=p;
        return TRUE;
    }
}
Status AddPloyn(Ploynomial *Pa,Ploynomial *Pb)
{
    Position ha,hb,qa,qb;
    term a,b;
    ha=GetHead(*Pa);
    hb=GetHead(*Pb);
    qa=NextPos(*Pa,ha);
    qb=NextPos(*Pb,hb);
    while(!ListEmpty(*Pa)&&!ListEmpty(*Pb))
    {
        a=GetCurElem(qa);
        b=GetCurElem(qb);
        switch(cmp(a,b))
        {
            case -1:
                ha=qa;
                qa=NextPos(*Pa,ha);
                break;
            case 0:
                qa->data.coef+=qb->data.coef;
                if(qa->data.coef==0)
                {
                    DelFirst(Pa,ha,&qa);
                    FreeNode(&qa);
                }
                else
                    ha=qa;
                DelFirst(Pb,hb,&qb);
                FreeNode(&qb);
                qb=NextPos(*Pb,hb);
                qa=NextPos(*Pa,ha);
                break;
            case 1:
                DelFirst(Pb,hb,&qb);
                InsFirst(Pa,ha,qb);
                ha=ha->next;
                qb=NextPos(*Pb,hb);
        }
    }
    if(!ListEmpty(*Pb))
    {
        Pb->tail=hb;
        Append(Pa,qb);
    }
    DestroyPloyn(Pb);
    return OK;
}
Status MultiplyPloyn(Ploynomial *Pa,Ploynomial *Pb)
{
    Ploynomial Pc;
    Position qa,qb;
    term a,b,c;
    InitList(&Pc);
    qa=GetHead(*Pa);
    qa=qa->next;
    while(qa)
    {
        a=GetCurElem(qa);
        qb=GetHead(*Pb);
        qb=qb->next;
        while(qb)
        {
            b=GetCurElem(qb);
            c.coef=a.coef*b.coef;
            c.expn=a.expn+b.expn;
            OrderInsert(&Pc,c,cmp);
            qb=qb->next;
        }
        qa=qa->next;
    }
    DestroyPloyn(Pb);
    ClearList(Pa);
    Pa->head=Pc.head;
    Pa->tail=Pc.tail;
    Pa->len=Pc.len;
    return OK;
}
Status AddPloyn1(Ploynomial *Pa,Ploynomial *Pb)
{
    Position qb;
    term b;
    qb=GetHead(*Pb);
    qb=qb->next;
    while(Pb)
    {
        b=GetCurElem(qb);
        OrderInsert(Pa,b,cmp);
        qb=qb->next;
    }
    DestroyPloyn(Pb);
    return OK;
}
Status SubtractPloyn(Ploynomial *Pa,Ploynomial *Pb)
{
    Position p;
    p=Pa->head;
    while(p->next)
    {
        p=p->next;
        p->data.coef*=-1;
    }
    AddPloyn(Pa,Pb);
    return OK;
}
