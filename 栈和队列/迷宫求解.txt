#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<malloc.h>
#include<ctype.h>
#define  MAXLENGTH  25
#define  OK  1
#define  ERROR  0
#define  TRUE  1
#define  FALSE  0
#define  INFEASIBLE  -1
#define  OVERFLOW  -2
#define  STACK_INIT_SIZE  100
#define  STACKINCREMENT  10
typedef int Status;
typedef struct PosType
{
	int x;
	int y;
}PosType;
typedef struct SElemType
{
	int ord;
	PosType seat;
	int di;
}SElemType;
struct SqStack
{
    SElemType *base;
    SElemType *top;
    int stacksize;
};
typedef int MazeType[MAXLENGTH][MAXLENGTH];
typedef struct SqStack SqStack;
MazeType m;
int x,y;
int curstep=1;
PosType begin,end;
Status Pass(PosType b);
Status InitStack(SqStack *S);
Status DestoryStack(SqStack *S);
Status ClearStack(SqStack *S);
Status StackEmpty(SqStack *S);
int StackLength(SqStack *S);
Status GetTop(SqStack *S,SElemType *e);
Status Push(SqStack *S,SElemType e);
Status Pop(SqStack *S,SElemType *e);
Status visit(SElemType c);
Status StackTraverse(SqStack *S,Status (*visit)());
void Print();
void Init(int k);
void FootPrint(PosType a);
void NextPos(PosType *c,int di);
void MarkPrint(PosType b);
Status MazePath(PosType start,PosType end);
int main()
{
    Init(1); // 初始化迷宫，通道值为1
	if(MazePath(begin,end)) // 有通路
	{
		printf("此迷宫从入口到出口的一条路径如下:\n");
		Print(); // 输出此通路
	}
	else
		printf("此迷宫没有从入口到出口的路径\n");
    return 0;
}
Status MazePath(PosType start,PosType end) // 算法3.3
{ // 若迷宫m中存在从入口start到出口end的通道，则求得一条
	// 存放在栈中(从栈底到栈顶)，并返回TRUE；否则返回FALSE
	SqStack S; // 顺序栈
	PosType curpos; // 当前位置
	SElemType e; // 栈元素
	InitStack(&S); // 初始化栈
	curpos=start; // 当前位置在入口
	do
	{
		if(Pass(curpos))
		{ // 当前位置可以通过，即是未曾走到过的通道块
			FootPrint(curpos); // 留下足迹
			e.ord=curstep;
			e.seat=curpos;
			e.di=0;
			Push(&S,e); // 入栈当前位置及状态
			curstep++; // 足迹加1
			if(curpos.x==end.x&&curpos.y==end.y) // 到达终点(出口)
				return TRUE;
			NextPos(&curpos,e.di); // 由当前位置及移动方向，确定下一个当前位置
		}
		else
		{ // 当前位置不能通过
			if(!StackEmpty(&S)) // 栈不空
			{
				Pop(&S,&e); // 退栈到前一位置
				curstep--; // 足迹减1
				while(e.di==3&&!StackEmpty(&S)) // 前一位置处于最后一个方向(北)
				{
					MarkPrint(e.seat); // 在前一位置留下不能通过的标记(-1)
					Pop(&S,&e); // 再退回一步
					curstep--; // 足迹再减1
				}
				if(e.di<3) // 没到最后一个方向(北)
				{
					e.di++; // 换下一个方向探索
					Push(&S,e); // 入栈该位置的下一个方向
					curstep++; // 足迹加1
					curpos=e.seat; // 确定当前位置
					NextPos(&curpos,e.di); // 确定下一个当前位置是该新方向上的相邻块
				}
			}
		}
	}while(!StackEmpty(&S));
	return FALSE;
}

void MarkPrint(PosType b)
{ // 使迷宫m的b点的序号变为-1(不能通过的路径)
	m[b.x][b.y]=-1;
}
void FootPrint(PosType a)
{ // 使迷宫m的a点的值变为足迹(curstep)
	m[a.x][a.y]=curstep;
}
void NextPos(PosType *c,int di)
{ // 根据当前位置及移动方向，求得下一位置
	PosType direc[4]={{0,1},{1,0},{0,-1},{-1,0}}; // {行增量,列增量},移动方向,依次为东南西北
	c->x+=direc[di].x;
	c->y+=direc[di].y;
}
void Print()
{
	int i,j;
	for(i=0;i<x;i++)
	{
		for(j=0;j<y;j++)
			printf("%3d",m[i][j]);
		printf("\n");
	}
}
void Init(int k)
{ // 设定迷宫布局(墙为值0,通道值为k)
	int i,j,x1,y1;
	printf("请输入迷宫的行数,列数(包括外墙)：");
	scanf("%d,%d",&x,&y);
	for(i=0;i<x;i++) // 定义周边值为0(外墙)
	{
		m[0][i]=0; // 行周边
		m[x-1][i]=0;
	}
	for(i=0;i<y-1;i++)
	{
		m[i][0]=0; // 列周边
		m[i][y-1]=0;
	}
	for(i=1;i<x-1;i++)
		for(j=1;j<y-1;j++)
			m[i][j]=k; // 定义除外墙，其余都是通道，初值为k
		printf("请输入迷宫内墙单元数：");
		scanf("%d",&j);
		printf("请依次输入迷宫内墙每个单元的行数,列数：\n");
		for(i=1;i<=j;i++)
		{
			scanf("%d,%d",&x1,&y1);
			m[x1][y1]=0; // 修改墙的值为0
		}
		printf("迷宫结构如下:\n");
		Print();
		printf("请输入入口的行数,列数：");
		scanf("%d,%d",&begin.x,&begin.y);
		printf("请输入出口的行数,列数：");
		scanf("%d,%d",&end.x,&end.y);
}
Status Pass(PosType b)
{ // 当迷宫m的b点的序号为1(可通过路径)，返回OK；否则，返回ERROR
	if(m[b.x][b.y]==1)
		return OK;
	else
		return ERROR;
}
Status InitStack(SqStack *S)
{
    (*S).base=(SElemType *)malloc(STACK_INIT_SIZE*sizeof(SElemType));
    if(!(*S).base)
        exit(OVERFLOW);
    (*S).top=(*S).base;
    (*S).stacksize=STACK_INIT_SIZE;
    return OK;
}
Status DestoryStack(SqStack *S)
{
    free((*S).base);
    (*S).base=NULL;
    (*S).top=NULL;
    (*S).stacksize=0;
    return OK;
}
Status ClearStack(SqStack *S)
{
    (*S).top=(*S).base;
    return OK;
}
Status StackEmpty(SqStack *S)
{
    if((*S).top==(*S).base)
        return TRUE;
    else
        return FALSE;
}
int StackLength(SqStack *S)
{
    return (*S).top-(*S).base;
}
Status GetTop(SqStack *S,SElemType *e)
{
    if((*S).top>(*S).base)
    {
        *e=*((*S).top-1);
        return OK;
    }
    return ERROR;
}
Status Push(SqStack *S,SElemType e)
{
    if(S->top-S->base>=100)
    {
        (*S).base=(SElemType *)realloc((*S).base,((*S).stacksize+STACKINCREMENT)*sizeof(SElemType));
        if(!(*S).base)
            exit(OVERFLOW);
        (*S).top=(*S).base+(*S).stacksize;
        (*S).stacksize+=STACKINCREMENT;
    }
    *((*S).top)++=e;
    return OK;
}
Status Pop(SqStack *S,SElemType *e)
{
    if((*S).top==(*S).base)
        return ERROR;
    *e=*--(*S).top;
    return OK;
}
Status StackTraverse(SqStack *S,Status (*visit)())
{
    while((*S).top>(*S).base)
        visit(*((*S).base++));
    printf("\n");
    return OK;
}
Status visit(SElemType c)
{
    printf("%d ",c);
    return OK;
}

