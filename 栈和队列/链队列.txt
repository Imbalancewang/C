#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include<string.h>
#define  OK  1
#define  ERROR  0
#define  TRUE  1
#define  FALSE  0
#define  INFEASIBLE  -1
#define  OVERFLOW  -2
typedef int QElement;
typedef int Status;
typedef struct QNode
{
    QElement data;
    struct QNode *next;

}QNode,*Queueptr;
typedef struct
{
    Queueptr front;
    Queueptr rear;
}LinkQueue;
Status InitQueue(LinkQueue *Q);
Status DestrotQueue(LinkQueue *Q);
Status ClearQueue(LinkQueue *Q);
Status QueueEmpty(LinkQueue *Q);
int QueueLength(LinkQueue *Q);
Status Gethead(LinkQueue *Q,QElement *e);
Status EnQueue(LinkQueue *Q,QElement e);
Status DeQueue(LinkQueue *Q,QElement *e);
Status visit(QElement e);
Status QueueTraverse(LinkQueue *Q,Status(*visit)(QElement));
int main()
{
    int i,l;
    LinkQueue Q;
    InitQueue(&Q);
    for(i=3;i<10;i++)
        EnQueue(&Q,i);
    l=QueueLength(&Q);
    QueueTraverse(&Q, visit);
    printf("%d ",l);
}
Status InitQueue(LinkQueue *Q)
{
    Q->front=Q->rear=(Queueptr)malloc(sizeof(QNode));
    if(!Q->front)
    {
        printf("fail\n");
        exit(OVERFLOW);
    }
    Q->front->next=NULL;
    return OK;
}
Status DestrotQueue(LinkQueue *Q)
{
    while(Q->front)
    {
        Q->rear=Q->front->next;
        free(Q->front);
        Q->front=Q->rear;
    }
    return OK;
}
Status ClearQueue(LinkQueue *Q)
{
    Q->front->next=NULL;
    Q->rear=Q->front;
    return OK;
}
Status QueueEmpty(LinkQueue *Q)
{
    if(Q->front==Q->rear)
        return TRUE;
    else
        return FALSE;
}
int QueueLength(LinkQueue *Q)
{
    int l=0;
    Queueptr p;
    p=Q->front->next;
    while(p)
    {
        l++;
        p=p->next;
    }
    return l;
}
Status Gethead(LinkQueue *Q,QElement *e)
{
    *e=Q->front->next->data;
    return OK;
}
Status EnQueue(LinkQueue *Q,QElement e)
{
    Queueptr p;
    p=(Queueptr)malloc(sizeof(QNode));
    p->data=e;
    p->next=NULL;
    Q->rear->next=p;
    Q->rear=p;
    return OK;
}
Status DeQueue(LinkQueue *Q,QElement *e)
{
    if(Q->front==Q->rear)
        return ERROR;
    *e=Q->front->next->data;
    Queueptr p;
    p=Q->front->next;
    Q->front->next=p->next;
    if(Q->rear==p) Q->rear=Q->front;
    free(p);
    return OK;
}
Status visit(QElement e)
{
    printf("%d ",e);
    return OK;
}
Status QueueTraverse(LinkQueue *Q,Status(*visit)(QElement))
{
    Queueptr p;
    p=Q->front->next;
    while(p)
    {
        visit(p->data);
        p=p->next;
    }
    printf("\n");
    return OK;
}
