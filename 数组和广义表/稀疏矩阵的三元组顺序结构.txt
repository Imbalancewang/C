#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<string.h>
#define  OK  1
#define  TRUE  1
#define  ERROR  0
#define  MAXSIZE  12500
typedef int Status;
typedef int ElemType;
typedef struct
{
    int i,j;
    ElemType e;
}Triple;
typedef struct
{
    Triple data[MAXSIZE+1];
    int mu,nu,tu;
}TSMatrix;
Status CreateSMatrix(TSMatrix *M);
Status DestroySMatrix(TSMatrix *M);
Status PrintSMatrix(TSMatrix M);
Status CopySMatrix(TSMatrix M,TSMatrix *T);
Status AddSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q);
Status SubtSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q);
Status MultSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q);
Status transposeSMatrix(TSMatrix M,TSMatrix *T);
Status Print2SMatrix(TSMatrix M);
Status FasttransposeSMatrix(TSMatrix M,TSMatrix *T);
int comp(int c1,int c2);
int main()
{
    TSMatrix M,N,T;
    CreateSMatrix(&M);
    //PrintSMatrix(M);
    Print2SMatrix(M);
    printf("\n");
    CreateSMatrix(&N);
    Print2SMatrix(N);
    printf("\n");
    AddSMatrix(M,N,&T);
    Print2SMatrix(T);
    printf("%d\n",T.tu);
    PrintSMatrix(T);
    return 0;
}
Status CreateSMatrix(TSMatrix *M)
{
    int i,m,n,k,j;
    ElemType e;
    printf("please input the rows columns and numbers of non-zero\n");
    scanf("%d %d %d ",&M->mu,&M->nu,&M->tu);
    M->data[0].i=0;
    for(i=1;i<=M->tu;i++)
    {
        scanf("%d %d %d",&m,&n,&e);
        M->data[i].i=m;
        M->data[i].j=n;
        M->data[i].e=e;
    }
    return OK;
}
Status PrintSMatrix(TSMatrix M)
{
    int i;
    for(i=1;i<=M.tu;i++)
    {
        printf("%d  %d  %d\n",M.data[i].i,M.data[i].j,M.data[i].e);
    }
    return OK;
}
Status Print2SMatrix(TSMatrix M)
{
    int i,j,k,flag;
    for(i=1;i<=M.mu;i++)
    {
        for(j=1;j<=M.nu;j++)
        {
            flag=1;
            for(k=1;k<=M.tu;k++)
            {
                if(i==M.data[k].i&&j==M.data[k].j)
                {
                    printf("%d ",M.data[k].e);
                    flag=0;
                    break;
                }
            }
            if(flag)
                printf("0 ");
        }
        printf("\n");
    }
    return OK;
}
Status DestroySMatrix(TSMatrix *M)
{
    M->mu=0;
    M->nu=0;
    M->tu=0;
    return OK;
}
Status CopySMatrix(TSMatrix M,TSMatrix *T)
{
    (*T)=M;
    return OK;
}
Status transposeSMatrix(TSMatrix M,TSMatrix *T)
{
    int col,p,q=1;
    T->mu=M.mu;
    T->nu=M.nu;
    T->tu=M.tu;
    if(T->tu)
    {
        for(col=1;col<=M.mu;col++)
        {
            for(p=1;p<=M.nu;p++)
            {
                if(M.data[p].j==col)
                {
                    T->data[q].i=M.data[p].j;
                    T->data[q].j=M.data[p].i;
                    T->data[q].e=M.data[p].e;
                    q++;
                }
            }
        }
    }
    return OK;
}
Status AddSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q)
{
    Triple *Mp,*Me,*Np,*Ne,*Qh,*Qe;
	if(M.mu!=N.mu)
		return ERROR;
	if(M.nu!=N.nu)
		return ERROR;
	(*Q).mu=M.mu;
	(*Q).nu=M.nu;
	Mp=&M.data[1];
	Np=&N.data[1];
	Me=&M.data[M.tu];
	Ne=&N.data[N.tu];
	Qh=Qe=(*Q).data;
	while(Mp <= Me && Np <= Ne)
	{
		Qe++;
		switch(comp(Mp->i,Np->i))
		{
		case  1:
			*Qe=*Mp;
			Mp++;
			break;
		case  0:
			switch(comp(Mp->j,Np->j))
			{
			case  1:
				*Qe=*Mp;
				Mp++;
				break;
			case  0:
				*Qe=*Mp;
				Qe->e+=Np->e;
				if(!Qe->e)
					Qe--;
				Mp++;
				Np++;
				break;
			case -1:
				*Qe=*Np;
				Np++;
			}
			break;
		case -1:
			*Qe=*Np;
			Np++;
		}
	}
	if(Mp>Me)
		while(Np<=Ne)
		{
			Qe++;
			*Qe=*Np;
			Np++;
		}
	if(Np>Ne)
		while(Mp<=Me)
		{
			Qe++;
			*Qe=*Mp;
			Mp++;
		}
	(*Q).tu=Qe-Qh;
    return OK;
}
Status SubtSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q)
{
	int i;
	for(i=1;i<=N.tu;i++)
		N.data[i].e*=-1;
	AddSMatrix(M,N,Q);
	return OK;
}
Status MultSMatrix(TSMatrix M,TSMatrix N,TSMatrix *Q)
{
	int i,j,h=M.mu,l=N.nu,Qn=0;
	ElemType *Qe;
	if(M.nu!=N.mu)
		return 0;
	(*Q).mu=M.mu;
	(*Q).nu=N.nu;
	Qe=(ElemType *)malloc(h*l*sizeof(ElemType)); // Qe为矩阵Q的临时数组
	// 矩阵Q的第i行j列的元素值存于*(Qe+(i-1)*l+j-1)中，初值为0
	for(i=0;i<h*l;i++)
		*(Qe+i)=0; // 赋初值0
	for(i=1;i<=M.tu;i++) // 矩阵元素相乘，结果累加到Qe
		for(j=1;j<=N.tu;j++)
			if(M.data[i].j==N.data[j].i)
				*(Qe+(M.data[i].i-1)*l+N.data[j].j-1)+=M.data[i].e * N.data[j].e;
	for(i=1;i<=M.mu;i++)
		for(j=1;j<=N.nu;j++)
			if(*(Qe+(i-1)*l+j-1)!=0)
			{
				Qn++;
				(*Q).data[Qn].e=*(Qe+(i-1)*l+j-1);
				(*Q).data[Qn].i=i;
				(*Q).data[Qn].j=j;
			}
	free(Qe);
	(*Q).tu=Qn;
	return OK;
}
int comp(int c1,int c2)
{
	int i;
	if(c1<c2)
		i=1;
	else if(c1==c2)
		i=0;
	else
		i=-1;
	return i;
}
Status FasttransposeSMatrix(TSMatrix M,TSMatrix *T)
{
	int p,q,t,col,*num,*cpot;
	num=(int *)malloc((M.nu+1)*sizeof(int));
	cpot=(int *)malloc((M.nu+1)*sizeof(int));
	(*T).mu=M.nu;
	(*T).nu=M.mu;
	(*T).tu=M.tu;
	if((*T).tu)
	{
		for(col=1;col<=M.nu;++col)
			num[col]=0;
		for(t=1;t<=M.tu;++t)
			++num[M.data[t].j];
		cpot[1]=1;
		for(col=2;col<=M.nu;++col)
			cpot[col]=cpot[col-1]+num[col-1];
		for(p=1;p<=M.tu;++p)
		{
			col=M.data[p].j;
			q=cpot[col];
			(*T).data[q].i=M.data[p].j;
			(*T).data[q].j=M.data[p].i;
			(*T).data[q].e=M.data[p].e;
			++cpot[col];
		}
	}
	free(num);
	free(cpot);
    return OK;
}

